/**
 * 各个排序算法
 */
#include <iostream>
#include <algorithm>
#include <vector>

void PrintNums(const std::vector<int>& nums)
{
    for (int num : nums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
}

// 冒泡排序 时间复杂度O(n²)
void BubbleSort(std::vector<int>& nums)
{
    bool hasSwap = false;
    int numSize = nums.size();
    for (int i = 0; i < numSize; i++) {
        for (int j = numSize - 1; j > i; j--) {
            if (nums[j] < nums[j - 1]) {
                std::swap(nums[j], nums[j - 1]);
                hasSwap = true;
            }
        }
        if (!hasSwap) {
            break;
        }
    }
}

// 插入排序 时间复杂度O(n²)
void InsertSort(std::vector<int>& nums)
{
    int numSize = nums.size();
    for (int i = 1; i < numSize; ++i) {
        int toBeSort = nums[i];
        for (int j = 0; j < i; ++j) {
            if (toBeSort < nums[j]) {
                for (int k = i; k > j; --k) {
                    nums[k] = nums[k - 1];
                }
                nums[j] = toBeSort;
                // PrintNums(nums);
                break;
            }
        }
    }
}

// 更简单的插入排序
void InsertSort(std::vector<int>& nums, int n)
{
    if (n <= 1)
        return;
    for (int i = 0; i < n; ++i) {
        for (int j = i; j > 0 && nums[j] < nums[j - 1]; --j) {
            std::swap(nums[j], nums[j - 1]);
        }
    }
}

// 选择排序 时间复杂度O(n²)
void SelectSort(std::vector<int>& nums)
{
    int numSize = nums.size();
    for (int i = 0; i < numSize; ++i) {
        for (int j = i + 1; j < numSize; ++j) {
            if (nums[i] > nums[j]) {
                std::swap(nums[i], nums[j]);
            }
        }
    }
}

// 测试数据: 10 9 2 5 3 7 101 18
int main()
{
    int count { 0 };
    std::vector<int> nums;
    while (std::cin >> count) {
        nums.clear();
        for (int i = 0; i < count; i++) {
            int num;
            std::cin >> num;
            nums.push_back(num);
        }
        // BubbleSort(nums);
        // InsertSort(nums);
        SelectSort(nums);
        PrintNums(nums);
    }
    return 0;
}